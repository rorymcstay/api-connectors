---
swagger: "2.0"
info:
  description: |
    ## REST API for the BitMEX Trading Platform

    [View Changelog](/app/apiChangelog)

    -

    #### Getting Started

    Base URI: [https://www.bitmex.com/api/v1](/api/v1)

    ##### Fetching Data

    All REST endpoints are documented below. You can try out any query right from this interface.

    Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.

    Additional documentation regarding filters, timestamps, and authentication
    is available in [the main API documentation](/app/restAPI).

    _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want
    to have the quickest possible data without being subject to ratelimits.

    ##### Return Types

    By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.

    ##### Trade Data Queries

    _This is only a small subset of what is available, to get you started._

    Fill in the parameters and click the `Try it out!` button to try any of these queries.

    - [Pricing Data](#!/Quote/Quote_get)

    - [Trade Data](#!/Trade/Trade_get)

    - [OrderBook Data](#!/OrderBook/OrderBook_getL2)

    - [Settlement Data](#!/Settlement/Settlement_get)

    - [Exchange Statistics](#!/Stats/Stats_history)

    Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.

    ##### Swagger Specification

    [â‡© Download Swagger JSON](swagger.json)

    -

    ## All API Endpoints

    Click to expand a section.
  version: 1.2.0
  title: BitMEX API
  termsOfService: https://www.bitmex.com/app/terms
  contact:
    email: support@bitmex.com
host: www.bitmex.com
basePath: /api/v1
tags:
- name: Announcement
  description: Public Announcements
- name: APIKey
  description: Persistent API Keys for Developers
- name: Chat
  description: Trollbox Data
- name: Execution
  description: Raw Order and Balance Data
- name: Funding
  description: Swap Funding History
- name: Instrument
  description: Tradeable Contracts, Indices, and History
- name: Insurance
  description: Insurance Fund Data
- name: Leaderboard
  description: Information on Top Users
- name: Liquidation
  description: Active Liquidations
- name: GlobalNotification
  description: Account Notifications
- name: Order
  description: Placement, Cancellation, Amending, and History
- name: OrderBook
  description: Level 2 Book Data
- name: Position
  description: Summary of Open and Closed Positions
- name: Quote
  description: Best Bid/Offer Snapshots & Historical Bins
- name: Schema
  description: Dynamic Schemata for Developers
- name: Settlement
  description: Historical Settlement Data
- name: Stats
  description: Exchange Statistics
- name: Trade
  description: Individual & Bucketed Trades
- name: User
  description: Account Operations
- name: UserEvent
  description: User Events for auditing
consumes:
- application/json
- application/x-www-form-urlencoded
produces:
- application/json
- application/xml
- text/xml
- application/javascript
- text/javascript
security:
- apiKey: []
  apiSignature: []
  apiExpires: []
paths:
  /announcement:
    get:
      tags:
      - Announcement
      summary: Get site announcements.
      operationId: Announcement.get
      parameters:
      - name: columns
        in: query
        description: Array of column names to fetch. If omitted, will return all columns.
        required: false
        type: string
        format: JSON
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Announcement'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /announcement/urgent:
    get:
      tags:
      - Announcement
      summary: Get urgent (banner) announcements.
      operationId: Announcement.getUrgent
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Announcement'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /apiKey:
    get:
      tags:
      - APIKey
      summary: Get your API Keys.
      operationId: APIKey.get
      parameters:
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/APIKey'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /chat:
    get:
      tags:
      - Chat
      summary: Get chat messages.
      operationId: Chat.get
      parameters:
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting ID for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: true
      - name: channelID
        in: query
        description: Channel id. GET /chat/channels for ids. Leave blank for all.
        required: false
        type: number
        format: double
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Chat'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
    post:
      tags:
      - Chat
      summary: Send a chat message.
      operationId: Chat.new
      parameters:
      - name: message
        in: formData
        required: true
        type: string
      - name: channelID
        in: formData
        description: Channel to post to. Default 1 (English).
        required: false
        type: number
        default: 1.0
        format: double
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Chat'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /chat/channels:
    get:
      tags:
      - Chat
      summary: Get available channels.
      operationId: Chat.getChannels
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ChatChannel'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /chat/connected:
    get:
      tags:
      - Chat
      summary: Get connected users.
      description: Returns an array with browser users in the first position and API users (bots) in the second position.
      operationId: Chat.getConnected
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/ConnectedUsers'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /execution:
    get:
      tags:
      - Execution
      summary: Get all raw executions for your account.
      description: |
        This returns all raw transactions, which includes order opening and cancelation, and order status
        changes. It can be quite noisy. More focused information is available at `/execution/tradeHistory`.

        You may also use the `filter` param to target your query. Specify an array as a filter value, such as
        `{"execType": ["Settlement", "Trade"]}` to filter on multiple values.

        See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for explanations of these fields.
      operationId: Execution.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Execution'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /execution/tradeHistory:
    get:
      tags:
      - Execution
      summary: Get all balance-affecting executions. This includes each trade, insurance charge, and settlement.
      operationId: Execution.getTradeHistory
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Execution'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /funding:
    get:
      tags:
      - Funding
      summary: Get funding history.
      operationId: Funding.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Funding'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /instrument:
    get:
      tags:
      - Instrument
      summary: Get instruments.
      description: 'This returns all instruments and indices, including those that have settled or are unlisted. Use this endpoint if you want to query for individual instruments or use a complex filter. Use `/instrument/active` to return active instruments, or use a filter like `{"state": "Open"}`.'
      operationId: Instrument.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Instrument'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /instrument/active:
    get:
      tags:
      - Instrument
      summary: Get all active instruments and instruments that have expired in <24hrs.
      operationId: Instrument.getActive
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Instrument'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /instrument/indices:
    get:
      tags:
      - Instrument
      summary: Get all price indices.
      operationId: Instrument.getIndices
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Instrument'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /instrument/activeAndIndices:
    get:
      tags:
      - Instrument
      summary: Helper method. Gets all active instruments and all indices. This is a join of the result of /indices and /active.
      operationId: Instrument.getActiveAndIndices
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Instrument'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /instrument/activeIntervals:
    get:
      tags:
      - Instrument
      summary: Return all active contract series and interval pairs.
      description: This endpoint is useful for determining which pairs are live. It returns two arrays of   strings. The first is intervals, such as `["XBT:perpetual", "XBT:quarterly", "XBT:biquarterly", "ETH:quarterly", ...]`. These identifiers are usable in any query's `symbol` param. The second array is the current resolution of these intervals. Results are mapped at the same index.
      operationId: Instrument.getActiveIntervals
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/InstrumentInterval'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /instrument/compositeIndex:
    get:
      tags:
      - Instrument
      summary: Show constituent parts of an index.
      description: |
        Composite indices are built from multiple external price sources.

        Use this endpoint to get the underlying prices of an index. For example, send a `symbol` of `.XBT` to
        get the ticks and weights of the constituent exchanges that build the ".XBT" index.

        A tick with reference `"BMI"` and weight `null` is the composite index tick.
      operationId: Instrument.getCompositeIndex
      parameters:
      - name: symbol
        in: query
        description: The composite index symbol.
        required: false
        type: string
        default: .XBT
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/IndexComposite'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /insurance:
    get:
      tags:
      - Insurance
      summary: Get insurance fund history.
      operationId: Insurance.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Insurance'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /leaderboard:
    get:
      tags:
      - Leaderboard
      summary: Get current leaderboard.
      operationId: Leaderboard.get
      parameters:
      - name: method
        in: query
        description: 'Ranking type. Options: "notional", "ROE"'
        required: false
        type: string
        default: notional
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Leaderboard'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /leaderboard/name:
    get:
      tags:
      - Leaderboard
      summary: Get your alias on the leaderboard.
      operationId: Leaderboard.getName
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/inline_response_200'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /liquidation:
    get:
      tags:
      - Liquidation
      summary: Get liquidation orders.
      operationId: Liquidation.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Liquidation'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /globalNotification:
    get:
      tags:
      - GlobalNotification
      summary: Get your current GlobalNotifications.
      description: This is an upcoming feature and currently does not return data.
      operationId: GlobalNotification.get
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GlobalNotification'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /order:
    get:
      tags:
      - Order
      summary: Get your orders.
      description: |-
        To get open orders only, send {"open": true} in the filter param.

        See <a href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html">the FIX Spec</a> for explanations of these fields.
      operationId: Order.getOrders
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
    post:
      tags:
      - Order
      summary: Create a new order.
      description: |
        ## Placing Orders

        This endpoint is used for placing orders. See individual fields below for more details on their use.

        #### Order Types

        All orders require a `symbol`. All other fields are optional except when otherwise specified.

        These are the valid `ordType`s:

        - **Limit**: The default order type. Specify an `orderQty` and `price`.
        - **Market**: A traditional Market order. A Market order will execute until filled or your bankruptcy price is reached, at
          which point it will cancel.
        - **Stop**: A Stop Market order. Specify an `orderQty` and `stopPx`. When the `stopPx` is reached, the order will be entered
          into the book.
          - On sell orders, the order will trigger if the triggering price is lower than the `stopPx`. On buys, higher.
          - Note: Stop orders do not consume margin until triggered. Be sure that the required margin is available in your
            account so that it may trigger fully.
          - `Close` Stops don't require an `orderQty`. See Execution Instructions below.
        - **StopLimit**: Like a Stop Market, but enters a Limit order instead of a Market order. Specify an `orderQty`, `stopPx`,
          and `price`.
        - **MarketIfTouched**: Similar to a Stop, but triggers are done in the opposite direction. Useful for Take Profit orders.
        - **LimitIfTouched**: As above; use for Take Profit Limit orders.

        #### Execution Instructions

        The following `execInst`s are supported. If using multiple, separate with a comma (e.g. `LastPrice,Close`).

        - **ParticipateDoNotInitiate**: Also known as a Post-Only order. If this order would have executed on placement,
          it will cancel instead.
        - **MarkPrice, LastPrice, IndexPrice**: Used by stop and if-touched orders to determine the triggering price.
          Use only one. By default, `'MarkPrice'` is used. Also used for Pegged orders to define the value of `'LastPeg'`.
        - **ReduceOnly**: A `'ReduceOnly'` order can only reduce your position, not increase it. If you have a `'ReduceOnly'`
          limit order that rests in the order book while the position is reduced by other orders, then its order quantity will
          be amended down or canceled. If there are multiple `'ReduceOnly'` orders the least aggressive will be amended first.
        - **Close**: `'Close'` implies `'ReduceOnly'`. A `'Close'` order will cancel other active limit orders with the same side
          and symbol if the open quantity exceeds the current position. This is useful for stops: by canceling these orders, a
          `'Close'` Stop is ensured to have the margin required to execute, and can only execute up to the full size of your
          position. If `orderQty` is not specified, a `'Close'` order has an `orderQty` equal to your current position's size.
          - Note that a `Close` order without an `orderQty` requires a `side`, so that BitMEX knows if it should trigger
            above or below the `stopPx`.

        #### Linked Orders

        [Linked Orders are deprecated as of 2018/11/10](https://blog.bitmex.com/api_announcement/deprecation-of-contingent-orders/)

        #### Trailing Stops

        You may use `pegPriceType` of `'TrailingStopPeg'` to create Trailing Stops. The pegged `stopPx` will move as the market
        moves away from the peg, and freeze as the market moves toward it.

        To use, combine with `pegOffsetValue` to set the `stopPx` of your order. The peg is set to the triggering price
        specified in the `execInst` (default `'MarkPrice'`). Use a negative offset for stop-sell and buy-if-touched orders.

        Requires `ordType`: `'Stop', 'StopLimit', 'MarketIfTouched', 'LimitIfTouched'`.

        #### Simple Quantities

        [Simple Quantities are deprecated as of 2018/10/26](https://blog.bitmex.com/api_announcement/deprecation-of-simpleorderqty-functionality/)

        #### Rate Limits

        See the [Bulk Order Documentation](#!/Order/Order_newBulk) if you need to place multiple orders at the same time.
        Bulk orders require fewer risk checks in the trading engine and thus are ratelimited at **1/10** the normal rate.

        You can also improve your reactivity to market movements while staying under your ratelimit by using the
        [Amend](#!/Order/Order_amend) and [Amend Bulk](#!/Order/Order_amendBulk) endpoints. This allows you to stay
        in the market and avoids the cancel/replace cycle.

        #### Tracking Your Orders

        If you want to keep track of order IDs yourself, set a unique `clOrdID` per order.
        This `clOrdID` will come back as a property on the order and any related executions (including on the WebSocket),
        and can be used to get or cancel the order. Max length is 36 characters.

        You can also change the `clOrdID` by amending an order, supplying an `origClOrdID`, and your desired new
        ID as the `clOrdID` param, like so:

        ```
        # Amends an order's leavesQty, and updates its clOrdID to "def-456"
        PUT /api/v1/order {"origClOrdID": "abc-123", "clOrdID": "def-456", "leavesQty": 1000}
        ```
      operationId: Order.new
      parameters:
      - name: symbol
        in: formData
        description: Instrument symbol. e.g. 'XBTUSD'.
        required: true
        type: string
      - name: side
        in: formData
        description: 'Order side. Valid options: Buy, Sell. Defaults to ''Buy'' unless `orderQty` is negative.'
        required: false
        type: string
      - name: simpleOrderQty
        in: formData
        description: 'Deprecated: simple orders are not supported after 2018/10/26'
        required: false
        type: number
        format: double
      - name: orderQty
        in: formData
        description: Order quantity in units of the instrument (i.e. contracts).
        required: false
        type: number
        format: int32
      - name: price
        in: formData
        description: Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched' orders.
        required: false
        type: number
        format: double
      - name: displayQty
        in: formData
        description: Optional quantity to display in the book. Use 0 for a fully hidden order.
        required: false
        type: number
        format: int32
      - name: stopPx
        in: formData
        description: Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders. Use a price below the current price for stop-sell orders and buy-if-touched orders. Use `execInst` of 'MarkPrice' or 'LastPrice' to define the current price used for triggering.
        required: false
        type: number
        format: double
      - name: clOrdID
        in: formData
        description: Optional Client Order ID. This clOrdID will come back on the order and any related executions.
        required: false
        type: string
      - name: clOrdLinkID
        in: formData
        description: 'Deprecated: linked orders are not supported after 2018/11/10.'
        required: false
        type: string
      - name: pegOffsetValue
        in: formData
        description: Optional trailing offset from the current price for 'Stop', 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for 'Pegged' orders.
        required: false
        type: number
        format: double
      - name: pegPriceType
        in: formData
        description: 'Optional peg price type. Valid options: LastPeg, MidPricePeg, MarketPeg, PrimaryPeg, TrailingStopPeg.'
        required: false
        type: string
      - name: ordType
        in: formData
        description: 'Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, Pegged. Defaults to ''Limit'' when `price` is specified. Defaults to ''Stop'' when `stopPx` is specified. Defaults to ''StopLimit'' when `price` and `stopPx` are specified.'
        required: false
        type: string
        default: Limit
      - name: timeInForce
        in: formData
        description: 'Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel, FillOrKill. Defaults to ''GoodTillCancel'' for ''Limit'', ''StopLimit'', and ''LimitIfTouched'' orders.'
        required: false
        type: string
      - name: execInst
        in: formData
        description: 'Optional execution instructions. Valid options: ParticipateDoNotInitiate, AllOrNone, MarkPrice, IndexPrice, LastPrice, Close, ReduceOnly, Fixed. ''AllOrNone'' instruction requires `displayQty` to be 0. ''MarkPrice'', ''IndexPrice'' or ''LastPrice'' instruction valid for ''Stop'', ''StopLimit'', ''MarketIfTouched'', and ''LimitIfTouched'' orders.'
        required: false
        type: string
      - name: contingencyType
        in: formData
        description: 'Deprecated: linked orders are not supported after 2018/11/10.'
        required: false
        type: string
      - name: text
        in: formData
        description: Optional order annotation. e.g. 'Take profit'.
        required: false
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
    put:
      tags:
      - Order
      summary: Amend the quantity or price of an open order.
      description: |
        Send an `orderID` or `origClOrdID` to identify the order you wish to amend.

        Both order quantity and price can be amended. Only one `qty` field can be used to amend.

        Use the `leavesQty` field to specify how much of the order you wish to remain open. This can be useful
        if you want to adjust your position's delta by a certain amount, regardless of how much of the order has
        already filled.

        > A `leavesQty` can be used to make a "Filled" order live again, if it is received within 60 seconds of the fill.

        Like order placement, amending can be done in bulk. Simply send a request to `PUT /api/v1/order/bulk` with
        a JSON body of the shape: `{"orders": [{...}, {...}]}`, each object containing the fields used in this endpoint.
      operationId: Order.amend
      parameters:
      - name: orderID
        in: formData
        description: Order ID
        required: false
        type: string
      - name: origClOrdID
        in: formData
        description: Client Order ID. See POST /order.
        required: false
        type: string
      - name: clOrdID
        in: formData
        description: Optional new Client Order ID, requires `origClOrdID`.
        required: false
        type: string
      - name: simpleOrderQty
        in: formData
        description: 'Deprecated: simple orders are not supported after 2018/10/26'
        required: false
        type: number
        format: double
      - name: orderQty
        in: formData
        description: Optional order quantity in units of the instrument (i.e. contracts).
        required: false
        type: number
        format: int32
      - name: simpleLeavesQty
        in: formData
        description: 'Deprecated: simple orders are not supported after 2018/10/26'
        required: false
        type: number
        format: double
      - name: leavesQty
        in: formData
        description: Optional leaves quantity in units of the instrument (i.e. contracts). Useful for amending partially filled orders.
        required: false
        type: number
        format: int32
      - name: price
        in: formData
        description: Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched' orders.
        required: false
        type: number
        format: double
      - name: stopPx
        in: formData
        description: Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders. Use a price below the current price for stop-sell orders and buy-if-touched orders.
        required: false
        type: number
        format: double
      - name: pegOffsetValue
        in: formData
        description: Optional trailing offset from the current price for 'Stop', 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for 'Pegged' orders.
        required: false
        type: number
        format: double
      - name: text
        in: formData
        description: Optional amend annotation. e.g. 'Adjust skew'.
        required: false
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
    delete:
      tags:
      - Order
      summary: Cancel order(s). Send multiple order IDs to cancel in bulk.
      description: Either an orderID or a clOrdID must be provided.
      operationId: Order.cancel
      parameters:
      - name: orderID
        in: formData
        description: Order ID(s).
        required: false
        type: string
        format: JSON
      - name: clOrdID
        in: formData
        description: Client Order ID(s). See POST /order.
        required: false
        type: string
        format: JSON
      - name: text
        in: formData
        description: Optional cancellation annotation. e.g. 'Spread Exceeded'.
        required: false
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /order/closePosition:
    post:
      tags:
      - Order
      summary: 'Close a position. [Deprecated, use POST /order with execInst: ''Close'']'
      description: If no `price` is specified, a market order will be submitted to close the whole of your position. This will also close all other open orders in this symbol.
      operationId: Order.closePosition
      parameters:
      - name: symbol
        in: formData
        description: Symbol of position to close.
        required: true
        type: string
      - name: price
        in: formData
        description: Optional limit price.
        required: false
        type: number
        format: double
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /order/all:
    delete:
      tags:
      - Order
      summary: Cancels all of your orders.
      operationId: Order.cancelAll
      parameters:
      - name: symbol
        in: formData
        description: Optional symbol. If provided, only cancels orders for that symbol.
        required: false
        type: string
      - name: filter
        in: formData
        description: 'Optional filter for cancellation. Use to only cancel some orders, e.g. `{"side": "Buy"}`.'
        required: false
        type: string
        format: JSON
      - name: text
        in: formData
        description: Optional cancellation annotation. e.g. 'Spread Exceeded'
        required: false
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /order/cancelAllAfter:
    post:
      tags:
      - Order
      summary: Automatically cancel all your orders after a specified timeout.
      description: |
        Useful as a dead-man's switch to ensure your orders are canceled in case of an outage.
        If called repeatedly, the existing offset will be canceled and a new one will be inserted in its place.

        Example usage: call this route at 15s intervals with an offset of 60000 (60s).
        If this route is not called within 60 seconds, all your orders will be automatically canceled.

        This is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#Dead-Mans-Switch-Auto-Cancel).
      operationId: Order.cancelAllAfter
      parameters:
      - name: timeout
        in: formData
        description: 'Timeout in ms. Set to 0 to cancel this timer. '
        required: true
        type: number
        format: double
      responses:
        "200":
          description: Request was successful
          schema:
            type: object
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /orderBook/L2:
    get:
      tags:
      - OrderBook
      summary: Get current orderbook in vertical format.
      operationId: OrderBook.getL2
      parameters:
      - name: symbol
        in: query
        description: Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
        required: true
        type: string
      - name: depth
        in: query
        description: Orderbook depth per side. Send 0 for full depth.
        required: false
        type: number
        default: 25.0
        minimum: 0
        format: int32
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderBookL2'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /position:
    get:
      tags:
      - Position
      summary: Get your positions.
      description: |
        This endpoint is used for retrieving position information. The fields largely follow the [FIX spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html) definitions. Some selected fields are explained in more detail below.

        The fields _account_, _symbol_, _currency_ are unique to each position and form its key.

        - **account**: Your unique account ID.
        - **symbol**: The contract for this position.
        - **currency**: The margin currency for this position.
        - **underlying**: Meta data of the _symbol_.
        - **quoteCurrency**: Meta data of the _symbol_, All prices are in the _quoteCurrency_
        - **commission**: The maximum of the maker, taker, and settlement fee.
        - **initMarginReq**: The initial margin requirement. This will be at least the symbol's default initial maintenance margin, but can be higher if you choose lower leverage.
        - **maintMarginReq**: The maintenance margin requirement. This will be at least the symbol's default maintenance maintenance margin, but can be higher if you choose a higher risk limit.
        - **riskLimit**: This is a function of your _maintMarginReq_.
        - **leverage**: 1 / initMarginReq.
        - **crossMargin**: True/false depending on whether you set cross margin on this position.
        - **deleveragePercentile**: Indicates where your position is in the ADL queue.
        - **rebalancedPnl**: The value of realised PNL that has transferred to your wallet for this position.
        - **prevRealisedPnl**: The value of realised PNL that has transferred to your wallet for this position since the position was closed.
        - **currentQty**: The current position amount in contracts.
        - **currentCost**: The current cost of the position in the settlement currency of the symbol (_currency_).
        - **currentComm**: The current commission of the position in the settlement currency of the symbol (_currency_).
        - **realisedCost**: The realised cost of this position calculated with regard to average cost accounting.
        - **unrealisedCost**: _currentCost_ - _realisedCost_.
        - **grossOpenCost**: The absolute value of your open orders for this symbol.
        - **grossOpenPremium**: The amount your bidding above the mark price in the settlement currency of the symbol (_currency_).
        - **markPrice**: The mark price of the symbol in _quoteCurrency_.
        - **markValue**: The _currentQty_ at the mark price in the settlement currency of the symbol (_currency_).
        - **homeNotional**: Value of position in units of _underlying_.
        - **foreignNotional**: Value of position in units of _quoteCurrency_.
        - **realisedPnl**: The negative of _realisedCost_.
        - **unrealisedGrossPnl**: _markValue_ - _unrealisedCost_.
        - **unrealisedPnl**: _unrealisedGrossPnl_.
        - **liquidationPrice**: Once markPrice reaches this price, this position will be liquidated.
        - **bankruptPrice**: Once markPrice reaches this price, this position will have no equity.
      operationId: Position.get
      parameters:
      - name: filter
        in: query
        description: 'Table filter. For example, send {"symbol": "XBTUSD"}.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: Which columns to fetch. For example, send ["columnName"].
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of rows to fetch.
        required: false
        type: number
        format: int32
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Position'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /position/isolate:
    post:
      tags:
      - Position
      summary: Enable isolated margin or cross margin per-position.
      operationId: Position.isolateMargin
      parameters:
      - name: symbol
        in: formData
        description: Position symbol to isolate.
        required: true
        type: string
      - name: enabled
        in: formData
        description: True for isolated margin, false for cross margin.
        required: false
        type: boolean
        default: true
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Position'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /position/riskLimit:
    post:
      tags:
      - Position
      summary: Update your risk limit.
      operationId: Position.updateRiskLimit
      parameters:
      - name: symbol
        in: formData
        description: Symbol of position to update risk limit on.
        required: true
        type: string
      - name: riskLimit
        in: formData
        description: New Risk Limit, in Satoshis.
        required: true
        type: number
        format: int64
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Position'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /position/transferMargin:
    post:
      tags:
      - Position
      summary: Transfer equity in or out of a position.
      operationId: Position.transferIsolatedMargin
      parameters:
      - name: symbol
        in: formData
        description: Symbol of position to isolate.
        required: true
        type: string
      - name: amount
        in: formData
        description: Amount to transfer, in Satoshis. May be negative.
        required: true
        type: number
        format: int64
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Position'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /position/leverage:
    post:
      tags:
      - Position
      summary: Choose leverage for a position.
      operationId: Position.updateLeverage
      parameters:
      - name: symbol
        in: formData
        description: Symbol of position to adjust.
        required: true
        type: string
      - name: leverage
        in: formData
        description: Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
        required: true
        type: number
        format: double
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Position'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /quote:
    get:
      tags:
      - Quote
      summary: Get Quotes.
      operationId: Quote.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Quote'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /quote/bucketed:
    get:
      tags:
      - Quote
      summary: Get previous quotes in time buckets.
      description: Timestamps returned by our bucketed endpoints are the **end** of the period, indicating when the bucket was written to disk. Some other common systems use the timestamp as the beginning of the period. Please be aware of this when using this endpoint.
      operationId: Quote.getBucketed
      parameters:
      - name: binSize
        in: query
        description: 'Time interval to bucket by. Available options: [1m,5m,1h,1d].'
        required: false
        type: string
        default: 1m
      - name: partial
        in: query
        description: If true, will send in-progress (incomplete) bins for the current time period.
        required: false
        type: boolean
        default: false
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Quote'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /schema:
    get:
      tags:
      - Schema
      summary: Get model schemata for data objects returned by this API.
      operationId: Schema.get
      parameters:
      - name: model
        in: query
        description: Optional model filter. If omitted, will return all models.
        required: false
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            type: object
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /schema/websocketHelp:
    get:
      tags:
      - Schema
      summary: Returns help text & subject list for websocket usage.
      operationId: Schema.websocketHelp
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: object
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /settlement:
    get:
      tags:
      - Settlement
      summary: Get settlement history.
      operationId: Settlement.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Settlement'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /stats:
    get:
      tags:
      - Stats
      summary: Get exchange-wide and per-series turnover and volume statistics.
      operationId: Stats.get
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Stats'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /stats/history:
    get:
      tags:
      - Stats
      summary: Get historical exchange-wide and per-series turnover and volume statistics.
      operationId: Stats.history
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/StatsHistory'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /stats/historyUSD:
    get:
      tags:
      - Stats
      summary: Get a summary of exchange statistics in USD.
      operationId: Stats.historyUSD
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/StatsUSD'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /trade:
    get:
      tags:
      - Trade
      summary: Get Trades.
      description: |-
        Please note that indices (symbols starting with `.`) post trades at intervals to the trade feed. These have a `size` of 0 and are used only to indicate a changing price.

        See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html) for explanations of these fields.
      operationId: Trade.get
      parameters:
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Trade'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /trade/bucketed:
    get:
      tags:
      - Trade
      summary: Get previous trades in time buckets.
      description: |-
        Timestamps returned by our bucketed endpoints are the **end** of the period, indicating when the bucket was written to disk. Some other common systems use the timestamp as the beginning of the period. Please be aware of this when using this endpoint.

        Also note the `open` price is equal to the `close` price of the previous timeframe bucket.
      operationId: Trade.getBucketed
      parameters:
      - name: binSize
        in: query
        description: 'Time interval to bucket by. Available options: [1m,5m,1h,1d].'
        required: false
        type: string
        default: 1m
      - name: partial
        in: query
        description: If true, will send in-progress (incomplete) bins for the current time period.
        required: false
        type: boolean
        default: false
      - name: symbol
        in: query
        description: |-
          Instrument symbol. Send a bare series (e.g. XBT) to get data for the nearest expiring contract in that series.

          You can also send a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`, `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.
        required: false
        type: string
      - name: filter
        in: query
        description: 'Generic table filter. Send JSON key/value pairs, such as `{"key": "value"}`. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more details.'
        required: false
        type: string
        format: JSON
      - name: columns
        in: query
        description: |-
          Array of column names to fetch. If omitted, will return all columns.

          Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
        required: false
        type: string
        format: JSON
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: int32
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: int32
      - name: reverse
        in: query
        description: If true, will sort results newest first.
        required: false
        type: boolean
        default: false
      - name: startTime
        in: query
        description: Starting date filter for results.
        required: false
        type: string
        format: date-time
      - name: endTime
        in: query
        description: Ending date filter for results.
        required: false
        type: string
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TradeBin'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /user/depositAddress:
    get:
      tags:
      - User
      summary: Get a deposit address.
      operationId: User.getDepositAddress
      parameters:
      - name: currency
        in: query
        required: false
        type: string
        default: XBt
      responses:
        "200":
          description: Request was successful
          schema:
            type: string
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/wallet:
    get:
      tags:
      - User
      summary: Get your current wallet information.
      operationId: User.getWallet
      parameters:
      - name: currency
        in: query
        required: false
        type: string
        default: XBt
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Wallet'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/walletHistory:
    get:
      tags:
      - User
      summary: Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
      operationId: User.getWalletHistory
      parameters:
      - name: currency
        in: query
        required: false
        type: string
        default: XBt
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 100.0
        format: double
      - name: start
        in: query
        description: Starting point for results.
        required: false
        type: number
        default: 0.0
        format: double
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/walletSummary:
    get:
      tags:
      - User
      summary: Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
      operationId: User.getWalletSummary
      parameters:
      - name: currency
        in: query
        required: false
        type: string
        default: XBt
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/executionHistory:
    get:
      tags:
      - User
      summary: Get the execution history by day.
      operationId: User.getExecutionHistory
      parameters:
      - name: symbol
        in: query
        required: true
        type: string
        default: XBTUSD
      - name: timestamp
        in: query
        required: true
        type: string
        default: 2017-02-13T12:00:00.000Z
        format: date-time
      responses:
        "200":
          description: Request was successful
          schema:
            type: object
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/minWithdrawalFee:
    get:
      tags:
      - User
      summary: Get the minimum withdrawal fee for a currency.
      description: This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
      operationId: User.minWithdrawalFee
      parameters:
      - name: currency
        in: query
        required: false
        type: string
        default: XBt
      responses:
        "200":
          description: Request was successful
          schema:
            type: object
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /user/requestWithdrawal:
    post:
      tags:
      - User
      summary: Request a withdrawal to an external wallet.
      description: This will send a confirmation email to the email address on record.
      operationId: User.requestWithdrawal
      parameters:
      - name: otpToken
        in: formData
        description: 2FA token. Required if 2FA is enabled on your account.
        required: false
        type: string
      - name: currency
        in: formData
        description: 'Currency you''re withdrawing. Options: `XBt`'
        required: true
        type: string
        default: XBt
      - name: amount
        in: formData
        description: Amount of withdrawal currency.
        required: true
        type: number
        format: int64
      - name: address
        in: formData
        description: Destination Address.
        required: true
        type: string
      - name: fee
        in: formData
        description: Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
        required: false
        type: number
        format: double
      - name: text
        in: formData
        description: Optional annotation, e.g. 'Transfer to home wallet'.
        required: false
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Transaction'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/cancelWithdrawal:
    post:
      tags:
      - User
      summary: Cancel a withdrawal.
      operationId: User.cancelWithdrawal
      parameters:
      - name: token
        in: formData
        required: true
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Transaction'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /user/confirmWithdrawal:
    post:
      tags:
      - User
      summary: Confirm a withdrawal.
      operationId: User.confirmWithdrawal
      parameters:
      - name: token
        in: formData
        required: true
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Transaction'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /user/confirmEmail:
    post:
      tags:
      - User
      summary: Confirm your email address with a token.
      operationId: User.confirm
      parameters:
      - name: token
        in: formData
        required: true
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /user/affiliateStatus:
    get:
      tags:
      - User
      summary: Get your current affiliate/referral status.
      operationId: User.getAffiliateStatus
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Affiliate'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/checkReferralCode:
    get:
      tags:
      - User
      summary: Check if a referral code is valid.
      description: If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404 or 451 if invalid.
      operationId: User.checkReferralCode
      parameters:
      - name: referralCode
        in: query
        required: false
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            type: number
            format: double
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /user/quoteFillRatio:
    get:
      tags:
      - User
      summary: Get 7 days worth of Quote Fill Ratio statistics.
      operationId: User.getQuoteFillRatio
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/QuoteFillRatio'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/logout:
    post:
      tags:
      - User
      summary: Log out of BitMEX.
      operationId: User.logout
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            type: "null"
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      security: []
      deprecated: false
  /user/preferences:
    post:
      tags:
      - User
      summary: Save user preferences.
      operationId: User.savePreferences
      parameters:
      - name: prefs
        in: formData
        required: true
        type: string
        format: JSON
      - name: overwrite
        in: formData
        description: If true, will overwrite all existing preferences.
        required: false
        type: boolean
        default: false
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user:
    get:
      tags:
      - User
      summary: Get your user model.
      operationId: User.get
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/commission:
    get:
      tags:
      - User
      summary: Get your account's commission status.
      operationId: User.getCommission
      parameters: []
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCommissionsBySymbol'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/margin:
    get:
      tags:
      - User
      summary: Get your account's margin status. Send a currency of "all" to receive an array of all supported currencies.
      operationId: User.getMargin
      parameters:
      - name: currency
        in: query
        required: false
        type: string
        default: XBt
      responses:
        "200":
          description: Request was successful
          schema:
            $ref: '#/definitions/Margin'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /user/communicationToken:
    post:
      tags:
      - User
      summary: Register your communication token for mobile clients
      operationId: User.communicationToken
      parameters:
      - name: token
        in: formData
        required: true
        type: string
      - name: platformAgent
        in: formData
        required: true
        type: string
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/CommunicationToken'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /userEvent:
    get:
      tags:
      - UserEvent
      summary: Get your user events
      operationId: UserEvent.get
      parameters:
      - name: count
        in: query
        description: Number of results to fetch.
        required: false
        type: number
        default: 150.0
        format: double
      - name: startId
        in: query
        description: Cursor for pagination.
        required: false
        type: number
        format: double
      responses:
        "200":
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserEvent'
        "400":
          description: Parameter Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: Access Denied
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
securityDefinitions:
  apiKey:
    type: apiKey
    name: api-key
    in: header
  apiSignature:
    type: apiKey
    name: api-signature
    in: header
  apiExpires:
    type: apiKey
    name: api-expires
    in: header
definitions:
  Announcement:
    type: object
    required:
    - id
    properties:
      id:
        type: number
        format: int32
      link:
        type: string
      title:
        type: string
      content:
        type: string
      date:
        type: string
        format: date-time
    description: Public Announcements
  Error:
    type: object
    required:
    - error
    properties:
      error:
        $ref: '#/definitions/Error_error'
  APIKey:
    type: object
    required:
    - id
    - name
    - nonce
    - secret
    - userId
    properties:
      id:
        type: string
        maxLength: 24
      secret:
        type: string
        maxLength: 48
      name:
        type: string
        maxLength: 64
      nonce:
        type: number
        format: int64
      cidr:
        type: string
        maxLength: 18
      permissions:
        type: array
        items:
          $ref: '#/definitions/x-any'
      enabled:
        type: boolean
        default: false
      userId:
        type: number
        format: int32
      created:
        type: string
        format: date-time
    description: Persistent API Keys for Developers
  Chat:
    type: object
    required:
    - date
    - html
    - message
    - user
    properties:
      id:
        type: number
        format: int32
      date:
        type: string
        format: date-time
      user:
        type: string
      message:
        type: string
      html:
        type: string
      fromBot:
        type: boolean
        default: false
      channelID:
        type: number
        format: double
    description: Trollbox Data
  ChatChannel:
    type: object
    required:
    - name
    properties:
      id:
        type: number
        format: int32
      name:
        type: string
  ConnectedUsers:
    type: object
    properties:
      users:
        type: number
        format: int32
      bots:
        type: number
        format: int32
  Execution:
    type: object
    required:
    - execID
    properties:
      execID:
        type: string
        format: guid
      orderID:
        type: string
        format: guid
      clOrdID:
        type: string
      clOrdLinkID:
        type: string
      account:
        type: number
        format: int64
      symbol:
        type: string
      side:
        type: string
      lastQty:
        type: number
        format: int64
      lastPx:
        type: number
        format: double
      underlyingLastPx:
        type: number
        format: double
      lastMkt:
        type: string
      lastLiquidityInd:
        type: string
      simpleOrderQty:
        type: number
        format: double
      orderQty:
        type: number
        format: int64
      price:
        type: number
        format: double
      displayQty:
        type: number
        format: int64
      stopPx:
        type: number
        format: double
      pegOffsetValue:
        type: number
        format: double
      pegPriceType:
        type: string
      currency:
        type: string
      settlCurrency:
        type: string
      execType:
        type: string
      ordType:
        type: string
      timeInForce:
        type: string
      execInst:
        type: string
      contingencyType:
        type: string
      exDestination:
        type: string
      ordStatus:
        type: string
      triggered:
        type: string
      workingIndicator:
        type: boolean
      ordRejReason:
        type: string
      simpleLeavesQty:
        type: number
        format: double
      leavesQty:
        type: number
        format: int64
      simpleCumQty:
        type: number
        format: double
      cumQty:
        type: number
        format: int64
      avgPx:
        type: number
        format: double
      commission:
        type: number
        format: double
      tradePublishIndicator:
        type: string
      multiLegReportingType:
        type: string
      text:
        type: string
      trdMatchID:
        type: string
        format: guid
      execCost:
        type: number
        format: int64
      execComm:
        type: number
        format: int64
      homeNotional:
        type: number
        format: double
      foreignNotional:
        type: number
        format: double
      transactTime:
        type: string
        format: date-time
      timestamp:
        type: string
        format: date-time
    description: Raw Order and Balance Data
  Funding:
    type: object
    required:
    - symbol
    - timestamp
    properties:
      timestamp:
        type: string
        format: date-time
      symbol:
        type: string
      fundingInterval:
        type: string
        format: date-time
      fundingRate:
        type: number
        format: double
      fundingRateDaily:
        type: number
        format: double
    description: Swap Funding History
  Instrument:
    type: object
    required:
    - symbol
    properties:
      symbol:
        type: string
      rootSymbol:
        type: string
      state:
        type: string
      typ:
        type: string
      listing:
        type: string
        format: date-time
      front:
        type: string
        format: date-time
      expiry:
        type: string
        format: date-time
      settle:
        type: string
        format: date-time
      relistInterval:
        type: string
        format: date-time
      inverseLeg:
        type: string
      sellLeg:
        type: string
      buyLeg:
        type: string
      optionStrikePcnt:
        type: number
        format: double
      optionStrikeRound:
        type: number
        format: double
      optionStrikePrice:
        type: number
        format: double
      optionMultiplier:
        type: number
        format: double
      positionCurrency:
        type: string
      underlying:
        type: string
      quoteCurrency:
        type: string
      underlyingSymbol:
        type: string
      reference:
        type: string
      referenceSymbol:
        type: string
      calcInterval:
        type: string
        format: date-time
      publishInterval:
        type: string
        format: date-time
      publishTime:
        type: string
        format: date-time
      maxOrderQty:
        type: number
        format: int64
      maxPrice:
        type: number
        format: double
      lotSize:
        type: number
        format: int64
      tickSize:
        type: number
        format: double
      multiplier:
        type: number
        format: int64
      settlCurrency:
        type: string
      underlyingToPositionMultiplier:
        type: number
        format: int64
      underlyingToSettleMultiplier:
        type: number
        format: int64
      quoteToSettleMultiplier:
        type: number
        format: int64
      isQuanto:
        type: boolean
      isInverse:
        type: boolean
      initMargin:
        type: number
        format: double
      maintMargin:
        type: number
        format: double
      riskLimit:
        type: number
        format: int64
      riskStep:
        type: number
        format: int64
      limit:
        type: number
        format: double
      capped:
        type: boolean
      taxed:
        type: boolean
      deleverage:
        type: boolean
      makerFee:
        type: number
        format: double
      takerFee:
        type: number
        format: double
      settlementFee:
        type: number
        format: double
      insuranceFee:
        type: number
        format: double
      fundingBaseSymbol:
        type: string
      fundingQuoteSymbol:
        type: string
      fundingPremiumSymbol:
        type: string
      fundingTimestamp:
        type: string
        format: date-time
      fundingInterval:
        type: string
        format: date-time
      fundingRate:
        type: number
        format: double
      indicativeFundingRate:
        type: number
        format: double
      rebalanceTimestamp:
        type: string
        format: date-time
      rebalanceInterval:
        type: string
        format: date-time
      openingTimestamp:
        type: string
        format: date-time
      closingTimestamp:
        type: string
        format: date-time
      sessionInterval:
        type: string
        format: date-time
      prevClosePrice:
        type: number
        format: double
      limitDownPrice:
        type: number
        format: double
      limitUpPrice:
        type: number
        format: double
      bankruptLimitDownPrice:
        type: number
        format: double
      bankruptLimitUpPrice:
        type: number
        format: double
      prevTotalVolume:
        type: number
        format: int64
      totalVolume:
        type: number
        format: int64
      volume:
        type: number
        format: int64
      volume24h:
        type: number
        format: int64
      prevTotalTurnover:
        type: number
        format: int64
      totalTurnover:
        type: number
        format: int64
      turnover:
        type: number
        format: int64
      turnover24h:
        type: number
        format: int64
      homeNotional24h:
        type: number
        format: double
      foreignNotional24h:
        type: number
        format: double
      prevPrice24h:
        type: number
        format: double
      vwap:
        type: number
        format: double
      highPrice:
        type: number
        format: double
      lowPrice:
        type: number
        format: double
      lastPrice:
        type: number
        format: double
      lastPriceProtected:
        type: number
        format: double
      lastTickDirection:
        type: string
      lastChangePcnt:
        type: number
        format: double
      bidPrice:
        type: number
        format: double
      midPrice:
        type: number
        format: double
      askPrice:
        type: number
        format: double
      impactBidPrice:
        type: number
        format: double
      impactMidPrice:
        type: number
        format: double
      impactAskPrice:
        type: number
        format: double
      hasLiquidity:
        type: boolean
      openInterest:
        type: number
        format: int64
      openValue:
        type: number
        format: int64
      fairMethod:
        type: string
      fairBasisRate:
        type: number
        format: double
      fairBasis:
        type: number
        format: double
      fairPrice:
        type: number
        format: double
      markMethod:
        type: string
      markPrice:
        type: number
        format: double
      indicativeTaxRate:
        type: number
        format: double
      indicativeSettlePrice:
        type: number
        format: double
      optionUnderlyingPrice:
        type: number
        format: double
      settledPrice:
        type: number
        format: double
      timestamp:
        type: string
        format: date-time
    description: Tradeable Contracts, Indices, and History
  InstrumentInterval:
    type: object
    required:
    - intervals
    - symbols
    properties:
      intervals:
        type: array
        items:
          type: string
      symbols:
        type: array
        items:
          type: string
  IndexComposite:
    type: object
    required:
    - timestamp
    properties:
      timestamp:
        type: string
        format: date-time
      symbol:
        type: string
      indexSymbol:
        type: string
      reference:
        type: string
      lastPrice:
        type: number
        format: double
      weight:
        type: number
        format: double
      logged:
        type: string
        format: date-time
  Insurance:
    type: object
    required:
    - currency
    - timestamp
    properties:
      currency:
        type: string
      timestamp:
        type: string
        format: date-time
      walletBalance:
        type: number
        format: int64
    description: Insurance Fund Data
  Leaderboard:
    type: object
    required:
    - name
    properties:
      name:
        type: string
      isRealName:
        type: boolean
      profit:
        type: number
        format: double
    description: Information on Top Users
  Liquidation:
    type: object
    required:
    - orderID
    properties:
      orderID:
        type: string
        format: guid
      symbol:
        type: string
      side:
        type: string
      price:
        type: number
        format: double
      leavesQty:
        type: number
        format: int64
    description: Active Liquidations
  GlobalNotification:
    type: object
    required:
    - body
    - date
    - title
    - ttl
    properties:
      id:
        type: number
        format: int32
      date:
        type: string
        format: date-time
      title:
        type: string
      body:
        type: string
      ttl:
        type: number
        format: int32
      type:
        type: string
        enum:
        - success
        - error
        - info
      closable:
        type: boolean
        default: true
      persist:
        type: boolean
        default: true
      waitForVisibility:
        type: boolean
        default: true
      sound:
        type: string
    description: Account Notifications
  Order:
    type: object
    required:
    - orderID
    properties:
      orderID:
        type: string
        format: guid
      clOrdID:
        type: string
      clOrdLinkID:
        type: string
      account:
        type: number
        format: int64
      symbol:
        type: string
      side:
        type: string
      simpleOrderQty:
        type: number
        format: double
      orderQty:
        type: number
        format: int64
      price:
        type: number
        format: double
      displayQty:
        type: number
        format: int64
      stopPx:
        type: number
        format: double
      pegOffsetValue:
        type: number
        format: double
      pegPriceType:
        type: string
      currency:
        type: string
      settlCurrency:
        type: string
      ordType:
        type: string
      timeInForce:
        type: string
      execInst:
        type: string
      contingencyType:
        type: string
      exDestination:
        type: string
      ordStatus:
        type: string
      triggered:
        type: string
      workingIndicator:
        type: boolean
      ordRejReason:
        type: string
      simpleLeavesQty:
        type: number
        format: double
      leavesQty:
        type: number
        format: int64
      simpleCumQty:
        type: number
        format: double
      cumQty:
        type: number
        format: int64
      avgPx:
        type: number
        format: double
      multiLegReportingType:
        type: string
      text:
        type: string
      transactTime:
        type: string
        format: date-time
      timestamp:
        type: string
        format: date-time
    description: Placement, Cancellation, Amending, and History
  OrderBookL2:
    type: object
    required:
    - id
    - side
    - symbol
    properties:
      symbol:
        type: string
      id:
        type: number
        format: int64
      side:
        type: string
      size:
        type: number
        format: int64
      price:
        type: number
        format: double
  x-any:
    type: object
  Position:
    type: object
    required:
    - account
    - currency
    - symbol
    properties:
      account:
        type: number
        format: int64
      symbol:
        type: string
      currency:
        type: string
      underlying:
        type: string
      quoteCurrency:
        type: string
      commission:
        type: number
        format: double
        default: 0.0
      initMarginReq:
        type: number
        format: double
        default: 0.0
      maintMarginReq:
        type: number
        format: double
        default: 0.0
      riskLimit:
        type: number
        format: int64
      leverage:
        type: number
        format: double
        default: 0.0
      crossMargin:
        type: boolean
      deleveragePercentile:
        type: number
        format: double
        default: 0.0
      rebalancedPnl:
        type: number
        format: int64
      prevRealisedPnl:
        type: number
        format: int64
      prevUnrealisedPnl:
        type: number
        format: int64
      prevClosePrice:
        type: number
        format: double
        default: 0.0
      openingTimestamp:
        type: string
        format: date-time
      openingQty:
        type: number
        format: int64
      openingCost:
        type: number
        format: int64
      openingComm:
        type: number
        format: int64
      openOrderBuyQty:
        type: number
        format: int64
      openOrderBuyCost:
        type: number
        format: int64
      openOrderBuyPremium:
        type: number
        format: int64
      openOrderSellQty:
        type: number
        format: int64
      openOrderSellCost:
        type: number
        format: int64
      openOrderSellPremium:
        type: number
        format: int64
      execBuyQty:
        type: number
        format: int64
      execBuyCost:
        type: number
        format: int64
      execSellQty:
        type: number
        format: int64
      execSellCost:
        type: number
        format: int64
      execQty:
        type: number
        format: int64
      execCost:
        type: number
        format: int64
      execComm:
        type: number
        format: int64
      currentTimestamp:
        type: string
        format: date-time
      currentQty:
        type: number
        format: int64
      currentCost:
        type: number
        format: int64
      currentComm:
        type: number
        format: int64
      realisedCost:
        type: number
        format: int64
      unrealisedCost:
        type: number
        format: int64
      grossOpenCost:
        type: number
        format: int64
      grossOpenPremium:
        type: number
        format: int64
      grossExecCost:
        type: number
        format: int64
      isOpen:
        type: boolean
      markPrice:
        type: number
        format: double
        default: 0.0
      markValue:
        type: number
        format: int64
      riskValue:
        type: number
        format: int64
      homeNotional:
        type: number
        format: double
        default: 0.0
      foreignNotional:
        type: number
        format: double
        default: 0.0
      posState:
        type: string
      posCost:
        type: number
        format: int64
      posCost2:
        type: number
        format: int64
      posCross:
        type: number
        format: int64
      posInit:
        type: number
        format: int64
      posComm:
        type: number
        format: int64
      posLoss:
        type: number
        format: int64
      posMargin:
        type: number
        format: int64
      posMaint:
        type: number
        format: int64
      posAllowance:
        type: number
        format: int64
      taxableMargin:
        type: number
        format: int64
      initMargin:
        type: number
        format: int64
      maintMargin:
        type: number
        format: int64
      sessionMargin:
        type: number
        format: int64
      targetExcessMargin:
        type: number
        format: int64
      varMargin:
        type: number
        format: int64
      realisedGrossPnl:
        type: number
        format: int64
      realisedTax:
        type: number
        format: int64
      realisedPnl:
        type: number
        format: int64
      unrealisedGrossPnl:
        type: number
        format: int64
      longBankrupt:
        type: number
        format: int64
      shortBankrupt:
        type: number
        format: int64
      taxBase:
        type: number
        format: int64
      indicativeTaxRate:
        type: number
        format: double
        default: 0.0
      indicativeTax:
        type: number
        format: int64
      unrealisedTax:
        type: number
        format: int64
      unrealisedPnl:
        type: number
        format: int64
      unrealisedPnlPcnt:
        type: number
        format: double
        default: 0.0
      unrealisedRoePcnt:
        type: number
        format: double
        default: 0.0
      simpleQty:
        type: number
        format: double
        default: 0.0
      simpleCost:
        type: number
        format: double
        default: 0.0
      simpleValue:
        type: number
        format: double
        default: 0.0
      simplePnl:
        type: number
        format: double
        default: 0.0
      simplePnlPcnt:
        type: number
        format: double
        default: 0.0
      avgCostPrice:
        type: number
        format: double
        default: 0.0
      avgEntryPrice:
        type: number
        format: double
        default: 0.0
      breakEvenPrice:
        type: number
        format: double
        default: 0.0
      marginCallPrice:
        type: number
        format: double
        default: 0.0
      liquidationPrice:
        type: number
        format: double
        default: 0.0
      bankruptPrice:
        type: number
        format: double
        default: 0.0
      timestamp:
        type: string
        format: date-time
      lastPrice:
        type: number
        format: double
        default: 0.0
      lastValue:
        type: number
        format: int64
    description: Summary of Open and Closed Positions
  Quote:
    type: object
    required:
    - symbol
    - timestamp
    properties:
      timestamp:
        type: string
        format: date-time
      symbol:
        type: string
      bidSize:
        type: number
        format: int64
      bidPrice:
        type: number
        format: double
      askPrice:
        type: number
        format: double
      askSize:
        type: number
        format: int64
    description: Best Bid/Offer Snapshots & Historical Bins
  Settlement:
    type: object
    required:
    - symbol
    - timestamp
    properties:
      timestamp:
        type: string
        format: date-time
      symbol:
        type: string
      settlementType:
        type: string
      settledPrice:
        type: number
        format: double
      optionStrikePrice:
        type: number
        format: double
      optionUnderlyingPrice:
        type: number
        format: double
      bankrupt:
        type: number
        format: int64
      taxBase:
        type: number
        format: int64
      taxRate:
        type: number
        format: double
    description: Historical Settlement Data
  Stats:
    type: object
    required:
    - rootSymbol
    properties:
      rootSymbol:
        type: string
      currency:
        type: string
      volume24h:
        type: number
        format: int64
      turnover24h:
        type: number
        format: int64
      openInterest:
        type: number
        format: int64
      openValue:
        type: number
        format: int64
    description: Exchange Statistics
  StatsHistory:
    type: object
    required:
    - date
    - rootSymbol
    properties:
      date:
        type: string
        format: date-time
      rootSymbol:
        type: string
      currency:
        type: string
      volume:
        type: number
        format: int64
      turnover:
        type: number
        format: int64
  StatsUSD:
    type: object
    required:
    - rootSymbol
    properties:
      rootSymbol:
        type: string
      currency:
        type: string
      turnover24h:
        type: number
        format: int64
      turnover30d:
        type: number
        format: int64
      turnover365d:
        type: number
        format: int64
      turnover:
        type: number
        format: int64
  Trade:
    type: object
    required:
    - symbol
    - timestamp
    properties:
      timestamp:
        type: string
        format: date-time
      symbol:
        type: string
      side:
        type: string
      size:
        type: number
        format: int64
      price:
        type: number
        format: double
      tickDirection:
        type: string
      trdMatchID:
        type: string
        format: guid
      grossValue:
        type: number
        format: int64
      homeNotional:
        type: number
        format: double
      foreignNotional:
        type: number
        format: double
    description: Individual & Bucketed Trades
  TradeBin:
    type: object
    required:
    - symbol
    - timestamp
    properties:
      timestamp:
        type: string
        format: date-time
      symbol:
        type: string
      open:
        type: number
        format: double
      high:
        type: number
        format: double
      low:
        type: number
        format: double
      close:
        type: number
        format: double
      trades:
        type: number
        format: int64
      volume:
        type: number
        format: int64
      vwap:
        type: number
        format: double
      lastSize:
        type: number
        format: int64
      turnover:
        type: number
        format: int64
      homeNotional:
        type: number
        format: double
      foreignNotional:
        type: number
        format: double
  Wallet:
    type: object
    required:
    - account
    - currency
    properties:
      account:
        type: number
        format: int64
      currency:
        type: string
      prevDeposited:
        type: number
        format: int64
      prevWithdrawn:
        type: number
        format: int64
      prevTransferIn:
        type: number
        format: int64
      prevTransferOut:
        type: number
        format: int64
      prevAmount:
        type: number
        format: int64
      prevTimestamp:
        type: string
        format: date-time
      deltaDeposited:
        type: number
        format: int64
      deltaWithdrawn:
        type: number
        format: int64
      deltaTransferIn:
        type: number
        format: int64
      deltaTransferOut:
        type: number
        format: int64
      deltaAmount:
        type: number
        format: int64
      deposited:
        type: number
        format: int64
      withdrawn:
        type: number
        format: int64
      transferIn:
        type: number
        format: int64
      transferOut:
        type: number
        format: int64
      amount:
        type: number
        format: int64
      pendingCredit:
        type: number
        format: int64
      pendingDebit:
        type: number
        format: int64
      confirmedDebit:
        type: number
        format: int64
      timestamp:
        type: string
        format: date-time
      addr:
        type: string
      script:
        type: string
      withdrawalLock:
        type: array
        items:
          type: string
  Transaction:
    type: object
    required:
    - transactID
    properties:
      transactID:
        type: string
        format: guid
      account:
        type: number
        format: int64
      currency:
        type: string
      transactType:
        type: string
      amount:
        type: number
        format: int64
      fee:
        type: number
        format: int64
      transactStatus:
        type: string
      address:
        type: string
      tx:
        type: string
      text:
        type: string
      transactTime:
        type: string
        format: date-time
      timestamp:
        type: string
        format: date-time
  AccessToken:
    type: object
    required:
    - id
    properties:
      id:
        type: string
      ttl:
        type: number
        format: double
        description: time to live in seconds (2 weeks by default)
        default: 1209600.0
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
  Affiliate:
    type: object
    required:
    - account
    - currency
    properties:
      account:
        type: number
        format: int64
      currency:
        type: string
      prevPayout:
        type: number
        format: int64
      prevTurnover:
        type: number
        format: int64
      prevComm:
        type: number
        format: int64
      prevTimestamp:
        type: string
        format: date-time
      execTurnover:
        type: number
        format: int64
      execComm:
        type: number
        format: int64
      totalReferrals:
        type: number
        format: int64
      totalTurnover:
        type: number
        format: int64
      totalComm:
        type: number
        format: int64
      payoutPcnt:
        type: number
        format: double
      pendingPayout:
        type: number
        format: int64
      timestamp:
        type: string
        format: date-time
      referrerAccount:
        type: number
        format: double
      referralDiscount:
        type: number
        format: double
      affiliatePayout:
        type: number
        format: double
  QuoteFillRatio:
    type: object
    required:
    - date
    properties:
      date:
        type: string
        format: date-time
      account:
        type: number
        format: double
      quoteCount:
        type: number
        format: double
      dealtCount:
        type: number
        format: double
      quotesMavg7:
        type: number
        format: double
      dealtMavg7:
        type: number
        format: double
      quoteFillRatioMavg7:
        type: number
        format: double
    description: Daily Quote Fill Ratio Statistic
  User:
    type: object
    required:
    - email
    - username
    properties:
      id:
        type: number
        format: int32
      ownerId:
        type: number
        format: int32
      firstname:
        type: string
      lastname:
        type: string
      username:
        type: string
      email:
        type: string
      phone:
        type: string
      created:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
      preferences:
        $ref: '#/definitions/UserPreferences'
      TFAEnabled:
        type: string
      affiliateID:
        type: string
        maxLength: 6
      pgpPubKey:
        type: string
        maxLength: 16384
      country:
        type: string
        maxLength: 3
      geoipCountry:
        type: string
        maxLength: 2
      geoipRegion:
        type: string
        maxLength: 2
      typ:
        type: string
    description: Account Operations
  UserCommissionsBySymbol:
    type: object
  Margin:
    type: object
    required:
    - account
    - currency
    properties:
      account:
        type: number
        format: int64
      currency:
        type: string
      riskLimit:
        type: number
        format: int64
      prevState:
        type: string
      state:
        type: string
      action:
        type: string
      amount:
        type: number
        format: int64
      pendingCredit:
        type: number
        format: int64
      pendingDebit:
        type: number
        format: int64
      confirmedDebit:
        type: number
        format: int64
      prevRealisedPnl:
        type: number
        format: int64
      prevUnrealisedPnl:
        type: number
        format: int64
      grossComm:
        type: number
        format: int64
      grossOpenCost:
        type: number
        format: int64
      grossOpenPremium:
        type: number
        format: int64
      grossExecCost:
        type: number
        format: int64
      grossMarkValue:
        type: number
        format: int64
      riskValue:
        type: number
        format: int64
      taxableMargin:
        type: number
        format: int64
      initMargin:
        type: number
        format: int64
      maintMargin:
        type: number
        format: int64
      sessionMargin:
        type: number
        format: int64
      targetExcessMargin:
        type: number
        format: int64
      varMargin:
        type: number
        format: int64
      realisedPnl:
        type: number
        format: int64
      unrealisedPnl:
        type: number
        format: int64
      indicativeTax:
        type: number
        format: int64
      unrealisedProfit:
        type: number
        format: int64
      syntheticMargin:
        type: number
        format: int64
      walletBalance:
        type: number
        format: int64
      marginBalance:
        type: number
        format: int64
      marginBalancePcnt:
        type: number
        format: double
        default: 0.0
      marginLeverage:
        type: number
        format: double
        default: 0.0
      marginUsedPcnt:
        type: number
        format: double
        default: 0.0
      excessMargin:
        type: number
        format: int64
      excessMarginPcnt:
        type: number
        format: double
        default: 0.0
      availableMargin:
        type: number
        format: int64
      withdrawableMargin:
        type: number
        format: int64
      timestamp:
        type: string
        format: date-time
      grossLastValue:
        type: number
        format: int64
      commission:
        type: number
        format: double
        default: 0.0
  CommunicationToken:
    type: object
    required:
    - channel
    - deviceToken
    - id
    - userId
    properties:
      id:
        type: string
      userId:
        type: number
        format: int32
      deviceToken:
        type: string
      channel:
        type: string
    description: User communication SNS token
  UserEvent:
    type: object
    required:
    - created
    - createdById
    - status
    - type
    - userId
    properties:
      id:
        type: number
        format: double
      type:
        type: string
        enum:
        - apiKeyCreated
        - deleverageExecution
        - depositConfirmed
        - depositPending
        - banZeroVolumeApiUser
        - liquidationOrderPlaced
        - login
        - pgpMaskedEmail
        - pgpTestEmail
        - passwordChanged
        - positionStateLiquidated
        - positionStateWarning
        - resetPasswordConfirmed
        - resetPasswordRequest
        - transferCanceled
        - transferCompleted
        - transferReceived
        - transferRequested
        - twoFactorDisabled
        - twoFactorEnabled
        - withdrawalCanceled
        - withdrawalCompleted
        - withdrawalConfirmed
        - withdrawalRequested
        - verify
      status:
        type: string
        enum:
        - success
        - failure
      userId:
        type: number
        format: double
      createdById:
        type: number
        format: double
      ip:
        type: string
      geoipCountry:
        type: string
        maxLength: 2
      geoipRegion:
        type: string
        maxLength: 3
      geoipSubRegion:
        type: string
        maxLength: 3
      eventMeta:
        type: object
        properties: {}
      created:
        type: string
        format: date-time
    description: User Events for auditing
  UserPreferences:
    type: object
    properties:
      alertOnLiquidations:
        type: boolean
      animationsEnabled:
        type: boolean
      announcementsLastSeen:
        type: string
        format: date-time
      chatChannelID:
        type: number
        format: double
      colorTheme:
        type: string
      currency:
        type: string
      debug:
        type: boolean
      disableEmails:
        type: array
        items:
          type: string
      disablePush:
        type: array
        items:
          type: string
      hideConfirmDialogs:
        type: array
        items:
          type: string
      hideConnectionModal:
        type: boolean
      hideFromLeaderboard:
        type: boolean
        default: false
      hideNameFromLeaderboard:
        type: boolean
        default: true
      hideNotifications:
        type: array
        items:
          type: string
      locale:
        type: string
        default: en-US
      msgsSeen:
        type: array
        items:
          type: string
      orderBookBinning:
        type: object
        properties: {}
      orderBookType:
        type: string
      orderClearImmediate:
        type: boolean
        default: false
      orderControlsPlusMinus:
        type: boolean
      showLocaleNumbers:
        type: boolean
        default: true
      sounds:
        type: array
        items:
          type: string
      strictIPCheck:
        type: boolean
        default: false
      strictTimeout:
        type: boolean
        default: true
      tickerGroup:
        type: string
      tickerPinned:
        type: boolean
      tradeLayout:
        type: string
  inline_response_200:
    type: object
    properties:
      name:
        type: string
  Error_error:
    type: object
    properties:
      message:
        type: string
      name:
        type: string
